run-name: Release Notes
name: Release Notes

on:
  workflow_dispatch:
    inputs:
      config:
        type: choice
        description: Release Notes
        options:
        - win10-64-2009-alpha
        - win10-64-2009
        - win11-64-2009-alpha
        - win11-64-2009
        - win2022-64-2009-alpha
        - win2022-64-2009
        - trusted-win2022-64-2009

jobs:
  upload:
    name: "Upload release notes"
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_APPLICATION_ID_FXCI }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_UNTRUSTED }}
          enable-AzPSSession: true
      
      - name: "Download Release Notes to Github"
        uses: azure/powershell@v2
        with:
          inlineScript: |
              $Config = "${{ github.event.inputs.config }}"
              ## Download the release notes
              Write-host "Downloading Release Notes for $($Config).md"
              $ENV:AZCOPY_AUTO_LOGIN_TYPE = "PSCRED"
              azcopy copy "https://roninpuppetassets.blob.core.windows.net/packer/$($Config).md" "./config/$($Config).md"
          azPSVersion: "latest"
      - name: Create Pull Request for Release
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          ## Vars
          $Config = "${{ github.event.inputs.config }}"
          $Date = Get-Date -Format "yyyyMMddTHHmm"
          $Repo = "${{ github.repository }}"

          if ($Config -match "win10") {
            $ReleaseBranch = "releases/win10/$Date-docs"
          }
          elseif ($Config -match "win11") {
            $ReleaseBranch = "releases/win11/$Date-docs"
          }
          elseif ($Config -match "win2022") {
            $ReleaseBranch = "releases/win2022/$Date-docs"
          }
          else {
            $ReleaseBranch = $null
          }
          
          $branchExists = (gh api "/repos/$Repo/branches/$releaseBranch" | ConvertFrom-Json).Name
          
          if ($null -eq $branchExists) {
            git checkout -b $ReleaseBranch
            git push origin $ReleaseBranch
          } else {
            git checkout $ReleaseBranch
          }
          
          $PR_Body = @"
          # Release Notes for $($Config).md

          Automatically generated PR for $($Config).md
          "@

          $PR_Title = "$Config ($Date) Image Update"

          if (git status --porcelain) {
            git add "./config/$($Config).md"
            git commit -m "$($Date) - Release Notes for $($Config).md"
            git push -u origin $ReleaseBranch
            gh pr create --base main --head $ReleaseBranch --title $PR_Title --body $PR_Body
          }
