run-name: ${{ github.event.inputs.config }} - FXCI
name: FXCI

on:
  workflow_dispatch:
    inputs:
      config:
        type: choice
        description: Choose which pool to build
        options:
        - win10-64-2009-alpha
        - win10-64-2009
        - win11-64-2009-alpha
        - win11-64-2009
        - win2022-64-2009-alpha
        - win2022-64-2009

permissions:
  id-token: write
  contents: read

jobs:
  job1:
    name: "Create Image Tasks"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        shell: pwsh
        run: |
          Import-Module ${{ github.workspace }}\bin\WorkerImages\WorkerImages.psm1
          Set-AzWorkerImageLocation -Key '${{ github.event.inputs.config }}'
    outputs:
      LOCATIONS: ${{ steps.set-matrix.outputs.LOCATIONS }}
  job2:
    needs: job1
    name: "${{ github.event.inputs.config }} - ${{ matrix.LOCATIONS }}"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        locations: ${{fromJson(needs.job1.outputs.LOCATIONS)}}
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_FXCI }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_UNTRUSTED }}
          enable-AzPSSession: true
      - name: "Remove current images"
        uses: azure/powershell@v2
        with:
          inlineScript: |
            Import-Module ${{ github.workspace }}\bin\WorkerImages\WorkerImages.psm1
            Remove-AzWorkerImage -Key "${{ github.event.inputs.config }}" -Location "${{ matrix.LOCATIONS }}"
          azPSVersion: "latest"
      - name: 'Run Packer'
        shell: pwsh
        run: |
          Import-Module ${{ github.workspace }}\bin\WorkerImages\WorkerImages.psm1
          $Vars = @{
            Location = "${{ matrix.LOCATIONS }}"
            Key = '${{ github.event.inputs.config }}'
            Client_ID = "${{ secrets.AZURE_CLIENT_ID_FXCI }}"
            Client_Secret = "${{ secrets.AZURE_CLIENT_ID_FXCI_SECRET }}"
            oidc_request_url = "${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}"
            oidc_request_token = "${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}"
            Subscription_ID = "${{ secrets.AZURE_SUBSCRIPTION_ID_UNTRUSTED }}"
            Tenant_ID = "${{ secrets.AZURE_TENANT_ID }}"
            Application_ID = "${{ secrets.AZURE_APPLICATION_ID_FXCI }}"
          }
          New-AzWorkerImage @Vars
      - name: "Check for release notes"
        shell: pwsh
        run: |
          $exists = Test-Path -Path "${{ github.workspace }}/config/${{ github.event.inputs.config }}.md"
          if ($null -eq $exists) {
            Write-Host "No release notes found for ${{ github.event.inputs.config }}"
            exit 0
          } else {
            Write-Host "Release notes found for ${{ github.event.inputs.config }}"
            exit 0
          }
  job3:
    needs: job2
    name: "Upload SBOM for ${{ github.event.inputs.config }}"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Create Pull Request for Release
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          ## Vars
          $Config = "${{ github.event.inputs.config }}"
          $Date = Get-Date -Format "yyyyMMddTHHmm"
          $Repo = "${{ github.repository }}"

          if ($Config -match "win10") {
            $ReleaseBranch = "releases/win10/$Date-docs"
          }
          elseif ($Config -match "win11") {
            $ReleaseBranch = "releases/win11/$Date-docs"
          }
          elseif ($Config -match "win2022") {
            $ReleaseBranch = "releases/win2022/$Date-docs"
          }
          else {
            $ReleaseBranch = $null
          }
          
          $branchExists = (gh api "/repos/$Repo/branches/$releaseBranch" | ConvertFrom-Json).Name
          
          if ($null -eq $branchExists) {
            git checkout -b $ReleaseBranch
            git push origin $ReleaseBranch
          } else {
            git checkout $ReleaseBranch
          }
          
          $PR_Body = @"
          # Release Notes for $($Config).md

          Automatically generated PR for $($Config).md
          "@

          $PR_Title = "$Config ($Date) Image Update"

          if (git status --porcelain) {
            git add "${{ github.workspace }}/config/$($Config).md"
            git commit -m "$($Date) - Release Notes for $($Config).md"
            git push -u origin $ReleaseBranch
            gh pr create --base main --head $ReleaseBranch --title $PR_Title --body $PR_Body
          }
      