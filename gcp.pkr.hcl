# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
# 1 error occurred upgrading the following block:
# unhandled "clean_resource_name" call:
# there is no way to automatically upgrade the "clean_resource_name" call.
# Please manually upgrade to use custom validation rules, `replace(string, substring, replacement)` or `regex_replace(string, substring, replacement)`
# Visit https://packer.io/docs/templates/hcl_templates/variables#custom-validation-rules , https://www.packer.io/docs/templates/hcl_templates/functions/string/replace or https://www.packer.io/docs/templates/hcl_templates/functions/string/regex_replace for more infos.

source "googlecompute" "generic_translations_gcp" {
  disk_size           = 60
  image_licenses      = ["projects/vm-options/global/licenses/enable-vmx"]
  image_name          = "generic-translations-gcp-${build.type}-{{ clean_resource_name `${timestamp()}` }}"
  machine_type        = null
  project_id          = "translations-sandbox"
  source_image_family = "ubuntu-2204-lts"
  ssh_username        = "ubuntu"
  zone                = "us-west1-a"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.googlecompute.generic_translations_gcp"]

  provisioner "file" {
    destination = "/tmp/"
    source      = "./files.tar"
  }

  provisioner "shell" {
    inline = ["sudo tar xvf /tmp/files.tar -C / --strip-components=1", "rm /tmp/files.tar"]
  }

  provisioner "file" {
    destination = "/tmp/"
    source      = "./secrets.tar"
  }

  provisioner "shell" {
    inline = ["sudo mkdir -p /etc/taskcluster/secrets", "sudo tar xvf /tmp/secrets.tar -C /", "sudo chown root:root -R /etc/taskcluster", "sudo chmod 0400 -R /etc/taskcluster/secrets", "rm /tmp/secrets.tar"]
    only   = ["generic_translations_gcp"]
  }

  provisioner "shell" {
    inline = ["/usr/bin/cloud-init status --wait"]
    only   = ["generic_translations_gcp"]
  }

  provisioner "shell" {
    environment_vars    = ["TASKCLUSTER_VERSION=48.1.0", "CLOUD=google"]
    execute_command     = "sudo -S sh -c '{{ .Vars }} {{ .Path }}'"
    expect_disconnect   = true
    only                = ["generic_translations_gcp"]
    scripts             = ["scripts/ubuntu-jammy/01-kernel.sh", "scripts/ubuntu-jammy/02-grub.sh", "scripts/ubuntu-jammy/30-packages.sh", "scripts/ubuntu-jammy/60-networking.sh", "scripts/ubuntu-jammy/99-clean.sh", "scripts/ubuntu-worker-requirements/01-deb-packages.sh", "scripts/ubuntu-worker-requirements/05-python3-packages.sh", "scripts/ubuntu-cuda/10-install-cuda-libs.sh", "scripts/ubuntu-cuda/20-install-libcudnn.sh", "scripts/ubuntu-cuda/30-install-singularity.sh", "scripts/ubuntu-cuda/99-clean.sh", "scripts/generic-worker-linux/01-install-generic-worker.sh", "scripts/worker-runner-linux/01-install-worker-runner.sh", "scripts/worker-runner-linux/20-set-up-papertrail.sh", "scripts/worker-runner-gw-systemd/10-create-worker-runner-config.sh", "scripts/worker-runner-gw-systemd/20-add-and-enable-systemd-service.sh", "scripts/worker-runner-gw-systemd/30-create-tc-job-dirs.sh", "scripts/translations-worker-requirements/01-deb-packages.sh"]
    start_retry_timeout = "30m"
  }

  post-processor "manifest" {
    output     = "packer-artifacts.json"
    strip_path = true
  }
}
